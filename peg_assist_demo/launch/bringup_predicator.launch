<launch>

  <arg name="output" default="screen"/>

  <!-- =================================================================================
                        Launch Predicator
       ================================================================================= -->
  <node name="predicator_fake_class_node"
    type="fake_classes.py"
    pkg="predicator_fake_classification"
    output="$(arg output)">

    <rosparam param="class_info">
      - name: robot
        members:
          - wam
          - wam2
      - name: object
        members:
          - peg1
          - peg2
          - ring1
          - wam
          - wam2
          - stage
      - name: peg
        members:
          - peg1
          - peg2
      - name: ring
        members:
          - ring1
      - name: location
        members:
          - location1
          - location2
          - location3
          - location4
          - location5
    </rosparam>

    <rosparam param="param_class_info">
      - name: gripper_topic
        parent: wam
        members:
          - /gazebo/barrett_manager/hand/cmd
      - name: gripper_topic
        parent: wam2
        members:
          - /gazebo/w2barrett_manager/hand/cmd
      - name: robot_namespace
        parent: wam
        members:
          - /gazebo/barrett_manager
      - name: robot_namespace
        parent: wam2
        members:
        - /gazebo/w2barrett_manager
      - name: move_group_namespace
        parent: wam
        members:
          - /gazebo/barrett_manager/move_group
      - name: move_group_namespace
        parent: wam2
        members:
          - /gazebo/w2barrett_manager/move_group
      - name: joint_states_topic
        parent: wam
        members:
          - /gazebo/barrett_manager/wam/joint_states
      - name: joint_states_topic
        parent: wam2
        members:
          - /gazebo/w2barrett_manager/wam/joint_states
      - name: grasp_point
        parent: ring1
        members:
          - ring1/grasp1
      - name: component
        parent: wam
        members:
          - wam/shoulder_yaw_link
          - wam/shoulder_pitch_link
          - wam/upper_arm_link
          - wam/forearm_link
          - wam/wrist_yaw_link
          - wam/wrist_pitch_link
          - wam/wrist_palm_link
      - name: component
        parent: wam2
        members:
          - wam2/shoulder_yaw_link
          - wam2/shoulder_pitch_link
          - wam2/upper_arm_link
          - wam2/forearm_link
          - wam2/wrist_yaw_link
          - wam2/wrist_pitch_link
          - wam2/wrist_palm_link
      - name: component
        parent: peg1
        members:
          - peg1/peg_link
          - peg1/base_link
      - name: component
        parent: peg2
        members:
          - peg2/peg_link
          - peg2/base_link
      - name: component
        parent: ring1
        members:
          - ring1/ring_link
      - name: component
        parent: stage
        members:
          - stage_link
    </rosparam>
  </node>

  <!-- touching, etc. -->
  <include file="$(find predicator_collision)/launch/pegs_interaction_predicates_test.launch">
    <arg name="output" value="$(arg output)"/>
  </include>

  <!-- left, right, up, down, etc. -->
  <include file="$(find predicator_geometry)/launch/pegs_geometry_predicates_test.launch">
    <arg name="output" value="$(arg output)"/>
  </include>

  <include file="$(find predicator_movement)/launch/pegs_movement_predicates_test.launch">
    <arg name="output" value="$(arg output)"/>
  </include>

  <include file="$(find predicator_joint_states)/launch/wams.launch">
    <arg name="output" value="$(arg output)"/>
  </include>

  <!-- predicator core: test to determine if something has happened -->
  <node name="predicator_core" pkg="predicator_core" type="core.py"/>

</launch>
