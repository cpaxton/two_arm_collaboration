ros.import("lcsr_controllers");
export void load_controllers(string prefix) {
  /* Create Feed-Forward inverse dynamics component */
  loadComponent(prefix+"inverse_dynamics","lcsr_controllers::IDControllerKDL");
  connect(prefix+"barrett_manager.wam.position_out", prefix+"inverse_dynamics.joint_position_in", ConnPolicy());
  connect(prefix+"barrett_manager.wam.velocity_out", prefix+"inverse_dynamics.joint_velocity_in", ConnPolicy());
  connect( prefix+"inverse_dynamics.joint_effort_out", prefix+"effort_sum.feedforward_in", ConnPolicy());
  /* Create joint-space PID controller loop */
  loadComponent(prefix+"pid","lcsr_controllers::JointPIDController");
  connect(prefix+"barrett_manager.wam.position_out", prefix+"pid.joint_position_in", ConnPolicy());
  connect(prefix+"barrett_manager.wam.velocity_out", prefix+"pid.joint_velocity_in", ConnPolicy());
  connect( prefix+"pid.joint_effort_out", prefix+"effort_sum.feedback_in", ConnPolicy());
  /* Create joint-space trapezoidal trajectory generation with KDL */
  loadComponent(prefix+"traj_kdl","lcsr_controllers::JointTrajGeneratorKDL");
  connect(prefix+"barrett_manager.wam.position_out", prefix+"traj_kdl.joint_position_in", ConnPolicy());
  connect( prefix+"traj_kdl.joint_position_out", prefix+"pid.joint_position_cmd_in", ConnPolicy());
  connect( prefix+"traj_kdl.joint_velocity_out", prefix+"pid.joint_velocity_cmd_in", ConnPolicy());
  /* Create joint-space RML trajectory generator */
  loadComponent(prefix+"traj_rml","lcsr_controllers::JointTrajGeneratorRML");
  connect(prefix+"barrett_manager.wam.position_out", prefix+"traj_rml.joint_position_in", ConnPolicy());
  connect(prefix+"barrett_manager.wam.velocity_out", prefix+"traj_rml.joint_velocity_in", ConnPolicy());
  connect( prefix+"traj_rml.joint_position_out", prefix+"pid.joint_position_cmd_in", ConnPolicy());
  connect( prefix+"traj_rml.joint_velocity_out", prefix+"pid.joint_velocity_cmd_in", ConnPolicy());
  //connect( prefix+"traj_rml.joint_acceleration_out", prefix+"pid.joint_acceleration_cmd_in", ConnPolicy());
  /* Create a cartesian impedance controller (jacobian transpose) */
  loadComponent(prefix+"jtns","lcsr_controllers::JTNullspaceController");
  connectServices("tf",prefix+"jtns");
  connect(prefix+"barrett_manager.wam.position_out", prefix+"jtns.joint_position_in", ConnPolicy());
  connect(prefix+"barrett_manager.wam.velocity_out", prefix+"jtns.joint_velocity_in", ConnPolicy());
  connect( prefix+"jtns.joint_effort_out", prefix+"effort_sum.feedback_in", ConnPolicy());
  /* Create an IK controller */
  loadComponent(prefix+"ik","lcsr_controllers::IKController");
  connectPeers("tf",prefix+"ik");
  connect(prefix+"barrett_manager.wam.position_out", prefix+"ik.positions_in", ConnPolicy());
  connect( prefix+"ik.trajectories_out", prefix+"traj_rml.joint_traj_cmd_in", ConnPolicy());
  loadComponent(prefix+"cart_servo","lcsr_controllers::CartesianLogisticServo");
  connectPeers("tf",prefix+"cart_servo");
  connect(prefix+"barrett_manager.wam.position_out", prefix+"cart_servo.positions_in", ConnPolicy());
  connect( prefix+"cart_servo.framevel_out", prefix+"jtns.framevel_in", ConnPolicy());
  loadComponent(prefix+"coulomb","lcsr_controllers::CoulombCompensator");
  connect(prefix+"barrett_manager.wam.position_out", prefix+"coulomb.joint_position_in", ConnPolicy());
  //connect(prefix+"cart_servo.framevel_out", prefix+"coulomb.framevel_des_in", ConnPolicy());
  connect(prefix+"jtns.wrench_out", prefix+"coulomb.wrench_des_in", ConnPolicy());
  connect( prefix+"coulomb.joint_effort_out", prefix+"effort_sum.feedforward_in", ConnPolicy());
  /* Configure all components */
  configureComponent(prefix+"inverse_dynamics");
  configureComponent(prefix+"pid");
  configureComponent(prefix+"traj_kdl");
  configureComponent(prefix+"traj_rml");
  configureComponent(prefix+"jtns");
  configureComponent(prefix+"ik");
  configureComponent(prefix+"cart_servo");
  configureComponent(prefix+"coulomb");
  /* Add to the conman scheme */
  addPeer("scheme",prefix+"inverse_dynamics");
  addPeer("scheme",prefix+"pid");
  addPeer("scheme",prefix+"traj_kdl");
  addPeer("scheme",prefix+"traj_rml");
  addPeer("scheme",prefix+"jtns");
  addPeer("scheme",prefix+"ik");
  addPeer("scheme",prefix+"cart_servo");
  addPeer("scheme",prefix+"coulomb");
  /* Add blocks to the scheme */
  scheme.addBlock(prefix+"inverse_dynamics");
  scheme.addBlock(prefix+"pid");
  scheme.addBlock(prefix+"traj_kdl");
  scheme.addBlock(prefix+"traj_rml");
  scheme.addBlock(prefix+"jtns");
  scheme.addBlock(prefix+"ik");
  scheme.addBlock(prefix+"cart_servo");
  scheme.addBlock(prefix+"coulomb");
  /* Create joint control group */
  var string joint_control = prefix+"joint_control"
    scheme.addGroup(joint_control);
  scheme.addToGroup(prefix+"pid",joint_control);
  scheme.addToGroup(prefix+"traj_rml",joint_control);
  /* Create cart impedance control group */
  var string cart_imp_control = prefix+"cart_imp_control"
    scheme.addGroup(cart_imp_control);
  scheme.addToGroup(prefix+"jtns",cart_imp_control);
  scheme.addToGroup(prefix+"cart_servo",cart_imp_control);
  /* Create an IK control group */
  var string ik_control = prefix+"ik_control"
    scheme.addGroup(ik_control);
  scheme.addToGroup(prefix+"ik",ik_control);
  scheme.addToGroup(prefix+"traj_rml",ik_control);
  scheme.addToGroup(prefix+"pid",ik_control);
}

